from typing import Callable, Protocol
from .step import Step, Address, Bytes32


class MPT(Protocol):
    def get_node(self, key: bytes) -> bytes: ...
    def put_node(self, key: bytes, value: bytes) -> None: ...


class StepsTrace(Protocol):
    def world_accounts(self) -> MPT: ...
    def account_storage(self, address: Address) -> MPT: ...
    # code_hash is the sha3(code), not the account.
    # Necessary to get code that corresponds to the code-hash embedded in the account value.
    def code_lookup(self, code_hash: Bytes32) -> bytes: ...
    # persists code in an account, to retrieve by code_hash later
    def code_store(self, code: bytes) -> None: ...

    def last(self) -> Step: ...
    def by_index(self) -> Step: ...
    def length(self) -> int: ...


Processor = Callable[[StepsTrace], Step]

